name: Regrade Request Workflow 

on:
  issues:
    types: [closed]
  workflow_dispatch:

jobs:
  trigger-workflow:
    runs-on: ubuntu-24.04
    # Optional: Add permission configuration
    permissions:
      # For reading repository content
      contents: read
      actions: write
        # For accessing issues
      issues: write
      
    steps:
      - name: Log issue details
        run: echo "Issue \#${{ github.event.issue.number }} closed by ${{ github.event.issue.user.login }}"
      
      - name: Checking the labels containing 'regrade'
        id: check-label
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number
            });
            
            const labels = issue.data.labels.map(label => label.name)
            let status;
            for (let i = 0; i < labels.length; i++) {
              if (labels[i].includes('regrade')) {
                status = true;
                break;
              } else {
                status = false;
              }
            }
            if (!status) {
              core.info(`Issue #${issue_number} does NOT have the 'regrade' label`);
            }
            core.setOutput('status', status);
            

      - name: Sending the regrade request
        if: steps.check-label.outputs.status == 'true'
        run: |
          echo "Issue \#${{ github.event.issue.number }} has the 'regrade' label, running the script..."

          HTTP_RESPONSE=$(curl -L \
            -w "%{http_code}" \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GRADER_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ secrets.GRADING_REPO }}/actions/workflows/${{secrets.GRADING_WORKFLOW}}/dispatches \
            -d '{
              "ref":"${{ secrets.GRADING_BRANCH }}",
              "inputs":{
                "source_org": "${{ github.repository_owner }}",
                "source_repo": "${{ github.repository }}",
                "source_issue": "${{ github.event.issue.number }}",
                "issue_actor": "${{ github.event.issue.user.login }}",
                "trigger_sha": "${{ github.sha }}"
              }
            }')

          HTTP_STATUS=$(tail -n1 <<< "$HTTP_RESPONSE")  # get the status code
          HTTP_BODY=$(sed '$ d' <<< "$HTTP_RESPONSE")   # get the response body
          
          echo "HTTP response: $HTTP_RESPONSE"
          echo "label: ${{ github.event.issue.labels.*.name }}"


          echo "Status code: $HTTP_STATUS"
          echo "Response body: $HTTP_BODY"
          
          if [ "$HTTP_STATUS" -ge 400 ]; then
            echo "API request failed with status $HTTP_STATUS"
            exit 1
          fi

      - name: Check workflow trigger status
        if: ${{ failure() }}
        run: |
          echo "Failed to trigger regrade workflow"
          echo "Repository: ${{ github.repository }}"
          echo "Organization: ${{ github.repository_owner }}"

      - name: Reopen issue with comment if regrade request failed
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const assignees = issue.data.assignees;
            
            const assigneeString = assignees.map(assignee => '@' + assignee.login).join(', ');
            const message = assigneeString + ' Automated regrade report request failed. Reopening this issue from action.';

            // Add comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: message
            });
            
            // Reopen the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              state: 'open'
            });

            
            
            console.log(`Reopened issue #${issueNumber} with comment`);
